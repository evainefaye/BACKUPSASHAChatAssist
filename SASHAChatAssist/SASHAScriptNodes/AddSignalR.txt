#{'
	<script>
	$(document).ready(function() {

		/* Stop your connection if your are closing the window */
		window.onbeforeunload = function (e) {
			delete window.hubStart;
			$.connection.hub.stop();
		};

		/* Start the connection if not started */
		if (typeof(window.hubStart) === "undefined") {
			$.getScript("http://ajax.aspnetcdn.com/ajax/signalr/jquery.signalr-2.2.0.min.js", function () {
				/* URL of the HUB that is being used, this will be changed for production */
				$.getScript("http://hawkbane.biz/signalr/hubs", function() {
					chat = $.connection.myHub;

					/* Define methods the server can call on the client */

					/* This function sends any message desired to the web console */
					chat.client.debug = function (message) {
						console.log(message);
					};

					/*  Function to handle broadcasting of chat messages to the SASHA client */
					chat.client.broadcastMessage = function (chatId, time, name, message) {
						time = formatTime(time);
						var encodedTime = $("<div />").text(time).html();
						var encodedName = $("<div />").text(name).html();
						var encodedMsg = $("<div />").text(message).html();
						$("div#chatWindow").find("tbody").append("<tr><td class=time>[" + encodedTime + "]</td><td><strong>" + encodedName + "</strong>:&nbsp;" + encodedMsg + "</td></tr>");
						$("div#chatWindow").scrollTop($("div#chatWindow")[0].scrollHeight - $("div#chatWindow")[0].clientHeight);
					};

					/* Forces the chat window to display on the SASHA client */
					chat.client.openChatWindow = function () {
						$("div#slideChat").show();
						$("div#slideChat").animate({top: "0"}, 500);
					};

					/* Request to gather SASHA Dictionary Data for broadcast */
					chat.client.gatherSashaData = function (sendTo,fields) {
						gatherSashaData(sendTo,fields);
					};

					/* Request to remotely save dictionary */
					chat.client.saveDictionary = function(requesterId) {
						context=wf.getContext();
						agentID=$("div#agentID span").html();
						time=$.now();
						captureName=agentID+time;
						$.ajax({
							type: "POST",
							dataType: "json",
							url: "CaptureDictionary.do",
							data: {
								captureName: captureName,
								context: context
							}
						}).done(function() {
							chat.server.notifyDictionarySaved(requesterId, captureName);
						});
					};

					/* Enables the Opt Out Button */
					chat.client.enableOptOut = function(userName) {
						if ($("#wrapUp_button").length = 1) {
							return;
						}
						$("<div class=OptOutBegun title=\"Opt Out Initiated\">Opt Out has been initiated by " + userName + "</div>").dialog({
							closeOnEscape: true,
							width: $(window).width()-200,
						});
						setTimeOut(function() {
							if ($(".OptOutBegun").dialog("isOpen")) {
								$(".OptOutBegun").dialog("destroy");
							}
						},5000);
						wf.doEvent("wrapup.uverse");
					};

					/* Will generate an error message dialog box with the given title and message. Optionally Disconnects from the server. */
					chat.client.throwMessage = function (title, message, stopConnection) {
						if (stopConnection) {
							$.connection.hub.stop();
						}
						$("<div title=\'" + title + "\'>" + message + "</div>").dialog({
							modal: true,
							width: $(window).width()-200,
							buttons: {
								Ok: function () {
									$(this).dialog("close");
								}
							}
						});
					};


					/* Displays a list of unseen announcements */
					chat.client.showUnseenAnnouncement = function (announcements) {
						if (announcements == "[]") {
							return;
						}
						announce = "<table class=announcements><thead><tr><th>DATE</th><th>ENTERED BY</th><th>INFORMATION</th></tr></thead><tbody>";
						var obj = $.parseJSON(announcements);
						for (var i=0; i <= obj.length-1;i++) {
							item = obj[i];
							enteredDate = formatDateTime(item.enteredDate);
							announce = announce + "<tr><td class=date>" + enteredDate + "</td><td class=user>" + item.userName + "</td><td class=text>" + item.announcementText + "</td></tr>";
						}
						announce = announce + "</tbody></table>";
						$("<div title=\'IMPORTANT ANNOUNCEMENT(S)\'>Please make note of the following important announcement(s)<br /><br>" + announce + "</div>").dialog({
							modal: true,
							width: $(window).width()-200,
							buttons: {
								Ok: function () {
									$(this).dialog("close");
								}
							}
						});
					};

					/* Function to open chat window within sasha */
					chat.client.requestChat = function (requester,requesterConnectionId) {
						if ($("div#slideChat").is(":visible")) {
							return;
						}
						openChatWindow();
						if (!document.hasFocus()) {
							alert("Chat opened by " + requester);
						}
					};

					/* Location of Hub */
					/* This will be changed for production */
					$.connection.hub.url = "http://hawkbane.biz/signalr";
					window.startHub();
				});
			});
		}
	});

	/* Function to start Hub if not started */
		window.startHub = function () {
			if (typeof(window.hubStart) === "undefined") {
				window.hubStart = $.connection.hub.start().done(function () {
					smpSessionId = "'}#{smpSessionId}#{'";
					smpSessionId=smpSessionId.replace(/:/g,"");
					smpSessionId=smpSessionId.replace(/\\//g,"");
					chat.server.registerSashaSession("'}#{userName}#{'","'}#{AgentName}#{'",smpSessionId,"'}#{AgentLocationCode}#{'");
					CRToSend();
				});
			}
		};

		/* Formats UTC Time to LocalTime */
		formatTime = function(UTCTime) {
			local = new Date(UTCTime);
			localTime = ("00" + local.getHours()).substr(-2) + ":" + ("00" + local.getMinutes()).substr(-2) + ":" + ("00" + local.getSeconds()).substr(-2);
			return localTime;
		};

		/* Formats UTC Date and Time to LocalTime */
		formatDateTime = function(UTCTime) {
			local = new Date(UTCTime);
			localTime = ("00" + local.getMonth()).substr(-2) + "/" + ("00" + local.getDate()).substr(-2) + "/" + local.getFullYear() + " "  + ("00" + local.getHours()).substr(-2) + ":" + ("00" + local.getMinutes()).substr(-2) + ":" + ("00" + local.getSeconds()).substr(-2);
			return localTime;
		};

		CRToSend = function() {
        $(".message").off("keyup.CRToSend").on("keyup.CRToSend",function(event) {
            if (event.keyCode == 13) {
                message = $(this).val().trim();
                if (message != "") {
					chatId = "'}#{smpSessionId}#{'";
					chatId=chatId.replace(/:/g,"");
					chatId=chatId.replace(/\\//g,"");                
                    chat.server.broadcastMessage(chatId, message);
                    $(this).val("").focus();
                }
            }
        });
    };
	</script>
'}
